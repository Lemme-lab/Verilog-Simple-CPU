$date
	Fri Aug 23 12:05:40 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module ALU_16Bit_tb $end
$var wire 16 ! result [15:0] $end
$var wire 1 " overflow $end
$var wire 1 # cout $end
$var wire 16 $ accumulator [15:0] $end
$var wire 1 % ZO $end
$var wire 1 & NO $end
$var reg 16 ' a [15:0] $end
$var reg 16 ( b [15:0] $end
$var reg 1 ) load $end
$var reg 3 * op_select [2:0] $end
$var reg 3 + reg_select [2:0] $end
$var reg 1 , sub $end
$scope module uut $end
$var wire 16 - a [15:0] $end
$var wire 16 . accumulator [15:0] $end
$var wire 16 / b [15:0] $end
$var wire 1 ) load $end
$var wire 3 0 op_select [2:0] $end
$var wire 1 " overflow $end
$var wire 3 1 reg_select [2:0] $end
$var wire 1 , sub $end
$var wire 16 2 sum [15:0] $end
$var wire 1 3 overflow_arithmetic $end
$var wire 16 4 or_result_internal [15:0] $end
$var wire 16 5 mux_result [15:0] $end
$var wire 16 6 multiply_result [15:0] $end
$var wire 16 7 divide_result [15:0] $end
$var wire 1 # cout $end
$var wire 16 8 and_result_internal [15:0] $end
$var wire 1 % ZO $end
$var wire 1 & NO $end
$var reg 16 9 acc [15:0] $end
$var reg 16 : result [15:0] $end
$scope module andGate $end
$var wire 16 ; a [15:0] $end
$var wire 16 < b [15:0] $end
$var wire 16 = y [15:0] $end
$upscope $end
$scope module div $end
$var wire 16 > dividend [15:0] $end
$var wire 16 ? divisor [15:0] $end
$var reg 16 @ quotient [15:0] $end
$var reg 16 A remainder [15:0] $end
$upscope $end
$scope module math_unit $end
$var wire 1 % ZO $end
$var wire 16 B a [15:0] $end
$var wire 16 C b [15:0] $end
$var wire 16 D b_xor [15:0] $end
$var wire 1 E carry_in $end
$var wire 1 3 overflow $end
$var wire 1 , sub $end
$var wire 16 F sum [15:0] $end
$var wire 1 G or_result $end
$var wire 1 # cout $end
$var wire 1 & NO $end
$scope module adder $end
$var wire 16 H a [15:0] $end
$var wire 16 I b [15:0] $end
$var wire 1 E cin $end
$var wire 16 J sum [15:0] $end
$var wire 1 # cout $end
$var wire 16 K carry [15:0] $end
$scope module fa0 $end
$var wire 1 L a $end
$var wire 1 M b $end
$var wire 1 E cin $end
$var wire 1 N cout $end
$var wire 1 O sum $end
$upscope $end
$scope module fa1 $end
$var wire 1 P a $end
$var wire 1 Q b $end
$var wire 1 R cin $end
$var wire 1 S cout $end
$var wire 1 T sum $end
$upscope $end
$scope module fa10 $end
$var wire 1 U a $end
$var wire 1 V b $end
$var wire 1 W cin $end
$var wire 1 X cout $end
$var wire 1 Y sum $end
$upscope $end
$scope module fa11 $end
$var wire 1 Z a $end
$var wire 1 [ b $end
$var wire 1 \ cin $end
$var wire 1 ] cout $end
$var wire 1 ^ sum $end
$upscope $end
$scope module fa12 $end
$var wire 1 _ a $end
$var wire 1 ` b $end
$var wire 1 a cin $end
$var wire 1 b cout $end
$var wire 1 c sum $end
$upscope $end
$scope module fa13 $end
$var wire 1 d a $end
$var wire 1 e b $end
$var wire 1 f cin $end
$var wire 1 g cout $end
$var wire 1 h sum $end
$upscope $end
$scope module fa14 $end
$var wire 1 i a $end
$var wire 1 j b $end
$var wire 1 k cin $end
$var wire 1 l cout $end
$var wire 1 m sum $end
$upscope $end
$scope module fa15 $end
$var wire 1 n a $end
$var wire 1 o b $end
$var wire 1 p cin $end
$var wire 1 # cout $end
$var wire 1 q sum $end
$upscope $end
$scope module fa2 $end
$var wire 1 r a $end
$var wire 1 s b $end
$var wire 1 t cin $end
$var wire 1 u cout $end
$var wire 1 v sum $end
$upscope $end
$scope module fa3 $end
$var wire 1 w a $end
$var wire 1 x b $end
$var wire 1 y cin $end
$var wire 1 z cout $end
$var wire 1 { sum $end
$upscope $end
$scope module fa4 $end
$var wire 1 | a $end
$var wire 1 } b $end
$var wire 1 ~ cin $end
$var wire 1 !" cout $end
$var wire 1 "" sum $end
$upscope $end
$scope module fa5 $end
$var wire 1 #" a $end
$var wire 1 $" b $end
$var wire 1 %" cin $end
$var wire 1 &" cout $end
$var wire 1 '" sum $end
$upscope $end
$scope module fa6 $end
$var wire 1 (" a $end
$var wire 1 )" b $end
$var wire 1 *" cin $end
$var wire 1 +" cout $end
$var wire 1 ," sum $end
$upscope $end
$scope module fa7 $end
$var wire 1 -" a $end
$var wire 1 ." b $end
$var wire 1 /" cin $end
$var wire 1 0" cout $end
$var wire 1 1" sum $end
$upscope $end
$scope module fa8 $end
$var wire 1 2" a $end
$var wire 1 3" b $end
$var wire 1 4" cin $end
$var wire 1 5" cout $end
$var wire 1 6" sum $end
$upscope $end
$scope module fa9 $end
$var wire 1 7" a $end
$var wire 1 8" b $end
$var wire 1 9" cin $end
$var wire 1 :" cout $end
$var wire 1 ;" sum $end
$upscope $end
$upscope $end
$scope module orGate $end
$var wire 16 <" a [15:0] $end
$var wire 1 G y $end
$upscope $end
$upscope $end
$scope module mul $end
$var wire 16 =" a [15:0] $end
$var wire 16 >" b [15:0] $end
$var wire 16 ?" pp0 [15:0] $end
$var wire 16 @" product [15:0] $end
$var wire 16 A" sum7 [15:0] $end
$var wire 16 B" sum6 [15:0] $end
$var wire 16 C" sum5 [15:0] $end
$var wire 16 D" sum4 [15:0] $end
$var wire 16 E" sum3 [15:0] $end
$var wire 16 F" sum2 [15:0] $end
$var wire 16 G" sum1 [15:0] $end
$var wire 16 H" sum0 [15:0] $end
$var wire 16 I" pp9 [15:0] $end
$var wire 16 J" pp8 [15:0] $end
$var wire 16 K" pp7 [15:0] $end
$var wire 16 L" pp6 [15:0] $end
$var wire 16 M" pp5 [15:0] $end
$var wire 16 N" pp4 [15:0] $end
$var wire 16 O" pp3 [15:0] $end
$var wire 16 P" pp2 [15:0] $end
$var wire 16 Q" pp15 [15:0] $end
$var wire 16 R" pp14 [15:0] $end
$var wire 16 S" pp13 [15:0] $end
$var wire 16 T" pp12 [15:0] $end
$var wire 16 U" pp11 [15:0] $end
$var wire 16 V" pp10 [15:0] $end
$var wire 16 W" pp1 [15:0] $end
$var wire 16 X" final_sum [15:0] $end
$var wire 1 Y" carry6 $end
$var wire 1 Z" carry5 $end
$var wire 1 [" carry4 $end
$var wire 1 \" carry3 $end
$var wire 1 ]" carry2 $end
$var wire 1 ^" carry1 $end
$var wire 1 _" carry0 $end
$scope module adder0 $end
$var wire 16 `" a [15:0] $end
$var wire 16 a" b [15:0] $end
$var wire 1 b" cin $end
$var wire 16 c" sum [15:0] $end
$var wire 1 _" cout $end
$var wire 16 d" carry [15:0] $end
$scope module fa0 $end
$var wire 1 e" a $end
$var wire 1 f" b $end
$var wire 1 b" cin $end
$var wire 1 g" cout $end
$var wire 1 h" sum $end
$upscope $end
$scope module fa1 $end
$var wire 1 i" a $end
$var wire 1 j" b $end
$var wire 1 k" cin $end
$var wire 1 l" cout $end
$var wire 1 m" sum $end
$upscope $end
$scope module fa10 $end
$var wire 1 n" a $end
$var wire 1 o" b $end
$var wire 1 p" cin $end
$var wire 1 q" cout $end
$var wire 1 r" sum $end
$upscope $end
$scope module fa11 $end
$var wire 1 s" a $end
$var wire 1 t" b $end
$var wire 1 u" cin $end
$var wire 1 v" cout $end
$var wire 1 w" sum $end
$upscope $end
$scope module fa12 $end
$var wire 1 x" a $end
$var wire 1 y" b $end
$var wire 1 z" cin $end
$var wire 1 {" cout $end
$var wire 1 |" sum $end
$upscope $end
$scope module fa13 $end
$var wire 1 }" a $end
$var wire 1 ~" b $end
$var wire 1 !# cin $end
$var wire 1 "# cout $end
$var wire 1 ## sum $end
$upscope $end
$scope module fa14 $end
$var wire 1 $# a $end
$var wire 1 %# b $end
$var wire 1 &# cin $end
$var wire 1 '# cout $end
$var wire 1 (# sum $end
$upscope $end
$scope module fa15 $end
$var wire 1 )# a $end
$var wire 1 *# b $end
$var wire 1 +# cin $end
$var wire 1 _" cout $end
$var wire 1 ,# sum $end
$upscope $end
$scope module fa2 $end
$var wire 1 -# a $end
$var wire 1 .# b $end
$var wire 1 /# cin $end
$var wire 1 0# cout $end
$var wire 1 1# sum $end
$upscope $end
$scope module fa3 $end
$var wire 1 2# a $end
$var wire 1 3# b $end
$var wire 1 4# cin $end
$var wire 1 5# cout $end
$var wire 1 6# sum $end
$upscope $end
$scope module fa4 $end
$var wire 1 7# a $end
$var wire 1 8# b $end
$var wire 1 9# cin $end
$var wire 1 :# cout $end
$var wire 1 ;# sum $end
$upscope $end
$scope module fa5 $end
$var wire 1 <# a $end
$var wire 1 =# b $end
$var wire 1 ># cin $end
$var wire 1 ?# cout $end
$var wire 1 @# sum $end
$upscope $end
$scope module fa6 $end
$var wire 1 A# a $end
$var wire 1 B# b $end
$var wire 1 C# cin $end
$var wire 1 D# cout $end
$var wire 1 E# sum $end
$upscope $end
$scope module fa7 $end
$var wire 1 F# a $end
$var wire 1 G# b $end
$var wire 1 H# cin $end
$var wire 1 I# cout $end
$var wire 1 J# sum $end
$upscope $end
$scope module fa8 $end
$var wire 1 K# a $end
$var wire 1 L# b $end
$var wire 1 M# cin $end
$var wire 1 N# cout $end
$var wire 1 O# sum $end
$upscope $end
$scope module fa9 $end
$var wire 1 P# a $end
$var wire 1 Q# b $end
$var wire 1 R# cin $end
$var wire 1 S# cout $end
$var wire 1 T# sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 16 U# a [15:0] $end
$var wire 16 V# b [15:0] $end
$var wire 1 _" cin $end
$var wire 16 W# sum [15:0] $end
$var wire 1 ^" cout $end
$var wire 16 X# carry [15:0] $end
$scope module fa0 $end
$var wire 1 Y# a $end
$var wire 1 Z# b $end
$var wire 1 _" cin $end
$var wire 1 [# cout $end
$var wire 1 \# sum $end
$upscope $end
$scope module fa1 $end
$var wire 1 ]# a $end
$var wire 1 ^# b $end
$var wire 1 _# cin $end
$var wire 1 `# cout $end
$var wire 1 a# sum $end
$upscope $end
$scope module fa10 $end
$var wire 1 b# a $end
$var wire 1 c# b $end
$var wire 1 d# cin $end
$var wire 1 e# cout $end
$var wire 1 f# sum $end
$upscope $end
$scope module fa11 $end
$var wire 1 g# a $end
$var wire 1 h# b $end
$var wire 1 i# cin $end
$var wire 1 j# cout $end
$var wire 1 k# sum $end
$upscope $end
$scope module fa12 $end
$var wire 1 l# a $end
$var wire 1 m# b $end
$var wire 1 n# cin $end
$var wire 1 o# cout $end
$var wire 1 p# sum $end
$upscope $end
$scope module fa13 $end
$var wire 1 q# a $end
$var wire 1 r# b $end
$var wire 1 s# cin $end
$var wire 1 t# cout $end
$var wire 1 u# sum $end
$upscope $end
$scope module fa14 $end
$var wire 1 v# a $end
$var wire 1 w# b $end
$var wire 1 x# cin $end
$var wire 1 y# cout $end
$var wire 1 z# sum $end
$upscope $end
$scope module fa15 $end
$var wire 1 {# a $end
$var wire 1 |# b $end
$var wire 1 }# cin $end
$var wire 1 ^" cout $end
$var wire 1 ~# sum $end
$upscope $end
$scope module fa2 $end
$var wire 1 !$ a $end
$var wire 1 "$ b $end
$var wire 1 #$ cin $end
$var wire 1 $$ cout $end
$var wire 1 %$ sum $end
$upscope $end
$scope module fa3 $end
$var wire 1 &$ a $end
$var wire 1 '$ b $end
$var wire 1 ($ cin $end
$var wire 1 )$ cout $end
$var wire 1 *$ sum $end
$upscope $end
$scope module fa4 $end
$var wire 1 +$ a $end
$var wire 1 ,$ b $end
$var wire 1 -$ cin $end
$var wire 1 .$ cout $end
$var wire 1 /$ sum $end
$upscope $end
$scope module fa5 $end
$var wire 1 0$ a $end
$var wire 1 1$ b $end
$var wire 1 2$ cin $end
$var wire 1 3$ cout $end
$var wire 1 4$ sum $end
$upscope $end
$scope module fa6 $end
$var wire 1 5$ a $end
$var wire 1 6$ b $end
$var wire 1 7$ cin $end
$var wire 1 8$ cout $end
$var wire 1 9$ sum $end
$upscope $end
$scope module fa7 $end
$var wire 1 :$ a $end
$var wire 1 ;$ b $end
$var wire 1 <$ cin $end
$var wire 1 =$ cout $end
$var wire 1 >$ sum $end
$upscope $end
$scope module fa8 $end
$var wire 1 ?$ a $end
$var wire 1 @$ b $end
$var wire 1 A$ cin $end
$var wire 1 B$ cout $end
$var wire 1 C$ sum $end
$upscope $end
$scope module fa9 $end
$var wire 1 D$ a $end
$var wire 1 E$ b $end
$var wire 1 F$ cin $end
$var wire 1 G$ cout $end
$var wire 1 H$ sum $end
$upscope $end
$upscope $end
$scope module adder2 $end
$var wire 16 I$ a [15:0] $end
$var wire 16 J$ b [15:0] $end
$var wire 1 ^" cin $end
$var wire 16 K$ sum [15:0] $end
$var wire 1 ]" cout $end
$var wire 16 L$ carry [15:0] $end
$scope module fa0 $end
$var wire 1 M$ a $end
$var wire 1 N$ b $end
$var wire 1 ^" cin $end
$var wire 1 O$ cout $end
$var wire 1 P$ sum $end
$upscope $end
$scope module fa1 $end
$var wire 1 Q$ a $end
$var wire 1 R$ b $end
$var wire 1 S$ cin $end
$var wire 1 T$ cout $end
$var wire 1 U$ sum $end
$upscope $end
$scope module fa10 $end
$var wire 1 V$ a $end
$var wire 1 W$ b $end
$var wire 1 X$ cin $end
$var wire 1 Y$ cout $end
$var wire 1 Z$ sum $end
$upscope $end
$scope module fa11 $end
$var wire 1 [$ a $end
$var wire 1 \$ b $end
$var wire 1 ]$ cin $end
$var wire 1 ^$ cout $end
$var wire 1 _$ sum $end
$upscope $end
$scope module fa12 $end
$var wire 1 `$ a $end
$var wire 1 a$ b $end
$var wire 1 b$ cin $end
$var wire 1 c$ cout $end
$var wire 1 d$ sum $end
$upscope $end
$scope module fa13 $end
$var wire 1 e$ a $end
$var wire 1 f$ b $end
$var wire 1 g$ cin $end
$var wire 1 h$ cout $end
$var wire 1 i$ sum $end
$upscope $end
$scope module fa14 $end
$var wire 1 j$ a $end
$var wire 1 k$ b $end
$var wire 1 l$ cin $end
$var wire 1 m$ cout $end
$var wire 1 n$ sum $end
$upscope $end
$scope module fa15 $end
$var wire 1 o$ a $end
$var wire 1 p$ b $end
$var wire 1 q$ cin $end
$var wire 1 ]" cout $end
$var wire 1 r$ sum $end
$upscope $end
$scope module fa2 $end
$var wire 1 s$ a $end
$var wire 1 t$ b $end
$var wire 1 u$ cin $end
$var wire 1 v$ cout $end
$var wire 1 w$ sum $end
$upscope $end
$scope module fa3 $end
$var wire 1 x$ a $end
$var wire 1 y$ b $end
$var wire 1 z$ cin $end
$var wire 1 {$ cout $end
$var wire 1 |$ sum $end
$upscope $end
$scope module fa4 $end
$var wire 1 }$ a $end
$var wire 1 ~$ b $end
$var wire 1 !% cin $end
$var wire 1 "% cout $end
$var wire 1 #% sum $end
$upscope $end
$scope module fa5 $end
$var wire 1 $% a $end
$var wire 1 %% b $end
$var wire 1 &% cin $end
$var wire 1 '% cout $end
$var wire 1 (% sum $end
$upscope $end
$scope module fa6 $end
$var wire 1 )% a $end
$var wire 1 *% b $end
$var wire 1 +% cin $end
$var wire 1 ,% cout $end
$var wire 1 -% sum $end
$upscope $end
$scope module fa7 $end
$var wire 1 .% a $end
$var wire 1 /% b $end
$var wire 1 0% cin $end
$var wire 1 1% cout $end
$var wire 1 2% sum $end
$upscope $end
$scope module fa8 $end
$var wire 1 3% a $end
$var wire 1 4% b $end
$var wire 1 5% cin $end
$var wire 1 6% cout $end
$var wire 1 7% sum $end
$upscope $end
$scope module fa9 $end
$var wire 1 8% a $end
$var wire 1 9% b $end
$var wire 1 :% cin $end
$var wire 1 ;% cout $end
$var wire 1 <% sum $end
$upscope $end
$upscope $end
$scope module adder3 $end
$var wire 16 =% a [15:0] $end
$var wire 16 >% b [15:0] $end
$var wire 1 ]" cin $end
$var wire 16 ?% sum [15:0] $end
$var wire 1 \" cout $end
$var wire 16 @% carry [15:0] $end
$scope module fa0 $end
$var wire 1 A% a $end
$var wire 1 B% b $end
$var wire 1 ]" cin $end
$var wire 1 C% cout $end
$var wire 1 D% sum $end
$upscope $end
$scope module fa1 $end
$var wire 1 E% a $end
$var wire 1 F% b $end
$var wire 1 G% cin $end
$var wire 1 H% cout $end
$var wire 1 I% sum $end
$upscope $end
$scope module fa10 $end
$var wire 1 J% a $end
$var wire 1 K% b $end
$var wire 1 L% cin $end
$var wire 1 M% cout $end
$var wire 1 N% sum $end
$upscope $end
$scope module fa11 $end
$var wire 1 O% a $end
$var wire 1 P% b $end
$var wire 1 Q% cin $end
$var wire 1 R% cout $end
$var wire 1 S% sum $end
$upscope $end
$scope module fa12 $end
$var wire 1 T% a $end
$var wire 1 U% b $end
$var wire 1 V% cin $end
$var wire 1 W% cout $end
$var wire 1 X% sum $end
$upscope $end
$scope module fa13 $end
$var wire 1 Y% a $end
$var wire 1 Z% b $end
$var wire 1 [% cin $end
$var wire 1 \% cout $end
$var wire 1 ]% sum $end
$upscope $end
$scope module fa14 $end
$var wire 1 ^% a $end
$var wire 1 _% b $end
$var wire 1 `% cin $end
$var wire 1 a% cout $end
$var wire 1 b% sum $end
$upscope $end
$scope module fa15 $end
$var wire 1 c% a $end
$var wire 1 d% b $end
$var wire 1 e% cin $end
$var wire 1 \" cout $end
$var wire 1 f% sum $end
$upscope $end
$scope module fa2 $end
$var wire 1 g% a $end
$var wire 1 h% b $end
$var wire 1 i% cin $end
$var wire 1 j% cout $end
$var wire 1 k% sum $end
$upscope $end
$scope module fa3 $end
$var wire 1 l% a $end
$var wire 1 m% b $end
$var wire 1 n% cin $end
$var wire 1 o% cout $end
$var wire 1 p% sum $end
$upscope $end
$scope module fa4 $end
$var wire 1 q% a $end
$var wire 1 r% b $end
$var wire 1 s% cin $end
$var wire 1 t% cout $end
$var wire 1 u% sum $end
$upscope $end
$scope module fa5 $end
$var wire 1 v% a $end
$var wire 1 w% b $end
$var wire 1 x% cin $end
$var wire 1 y% cout $end
$var wire 1 z% sum $end
$upscope $end
$scope module fa6 $end
$var wire 1 {% a $end
$var wire 1 |% b $end
$var wire 1 }% cin $end
$var wire 1 ~% cout $end
$var wire 1 !& sum $end
$upscope $end
$scope module fa7 $end
$var wire 1 "& a $end
$var wire 1 #& b $end
$var wire 1 $& cin $end
$var wire 1 %& cout $end
$var wire 1 && sum $end
$upscope $end
$scope module fa8 $end
$var wire 1 '& a $end
$var wire 1 (& b $end
$var wire 1 )& cin $end
$var wire 1 *& cout $end
$var wire 1 +& sum $end
$upscope $end
$scope module fa9 $end
$var wire 1 ,& a $end
$var wire 1 -& b $end
$var wire 1 .& cin $end
$var wire 1 /& cout $end
$var wire 1 0& sum $end
$upscope $end
$upscope $end
$scope module adder4 $end
$var wire 16 1& a [15:0] $end
$var wire 16 2& b [15:0] $end
$var wire 1 \" cin $end
$var wire 16 3& sum [15:0] $end
$var wire 1 [" cout $end
$var wire 16 4& carry [15:0] $end
$scope module fa0 $end
$var wire 1 5& a $end
$var wire 1 6& b $end
$var wire 1 \" cin $end
$var wire 1 7& cout $end
$var wire 1 8& sum $end
$upscope $end
$scope module fa1 $end
$var wire 1 9& a $end
$var wire 1 :& b $end
$var wire 1 ;& cin $end
$var wire 1 <& cout $end
$var wire 1 =& sum $end
$upscope $end
$scope module fa10 $end
$var wire 1 >& a $end
$var wire 1 ?& b $end
$var wire 1 @& cin $end
$var wire 1 A& cout $end
$var wire 1 B& sum $end
$upscope $end
$scope module fa11 $end
$var wire 1 C& a $end
$var wire 1 D& b $end
$var wire 1 E& cin $end
$var wire 1 F& cout $end
$var wire 1 G& sum $end
$upscope $end
$scope module fa12 $end
$var wire 1 H& a $end
$var wire 1 I& b $end
$var wire 1 J& cin $end
$var wire 1 K& cout $end
$var wire 1 L& sum $end
$upscope $end
$scope module fa13 $end
$var wire 1 M& a $end
$var wire 1 N& b $end
$var wire 1 O& cin $end
$var wire 1 P& cout $end
$var wire 1 Q& sum $end
$upscope $end
$scope module fa14 $end
$var wire 1 R& a $end
$var wire 1 S& b $end
$var wire 1 T& cin $end
$var wire 1 U& cout $end
$var wire 1 V& sum $end
$upscope $end
$scope module fa15 $end
$var wire 1 W& a $end
$var wire 1 X& b $end
$var wire 1 Y& cin $end
$var wire 1 [" cout $end
$var wire 1 Z& sum $end
$upscope $end
$scope module fa2 $end
$var wire 1 [& a $end
$var wire 1 \& b $end
$var wire 1 ]& cin $end
$var wire 1 ^& cout $end
$var wire 1 _& sum $end
$upscope $end
$scope module fa3 $end
$var wire 1 `& a $end
$var wire 1 a& b $end
$var wire 1 b& cin $end
$var wire 1 c& cout $end
$var wire 1 d& sum $end
$upscope $end
$scope module fa4 $end
$var wire 1 e& a $end
$var wire 1 f& b $end
$var wire 1 g& cin $end
$var wire 1 h& cout $end
$var wire 1 i& sum $end
$upscope $end
$scope module fa5 $end
$var wire 1 j& a $end
$var wire 1 k& b $end
$var wire 1 l& cin $end
$var wire 1 m& cout $end
$var wire 1 n& sum $end
$upscope $end
$scope module fa6 $end
$var wire 1 o& a $end
$var wire 1 p& b $end
$var wire 1 q& cin $end
$var wire 1 r& cout $end
$var wire 1 s& sum $end
$upscope $end
$scope module fa7 $end
$var wire 1 t& a $end
$var wire 1 u& b $end
$var wire 1 v& cin $end
$var wire 1 w& cout $end
$var wire 1 x& sum $end
$upscope $end
$scope module fa8 $end
$var wire 1 y& a $end
$var wire 1 z& b $end
$var wire 1 {& cin $end
$var wire 1 |& cout $end
$var wire 1 }& sum $end
$upscope $end
$scope module fa9 $end
$var wire 1 ~& a $end
$var wire 1 !' b $end
$var wire 1 "' cin $end
$var wire 1 #' cout $end
$var wire 1 $' sum $end
$upscope $end
$upscope $end
$scope module adder5 $end
$var wire 16 %' a [15:0] $end
$var wire 16 &' b [15:0] $end
$var wire 1 [" cin $end
$var wire 16 '' sum [15:0] $end
$var wire 1 Z" cout $end
$var wire 16 (' carry [15:0] $end
$scope module fa0 $end
$var wire 1 )' a $end
$var wire 1 *' b $end
$var wire 1 [" cin $end
$var wire 1 +' cout $end
$var wire 1 ,' sum $end
$upscope $end
$scope module fa1 $end
$var wire 1 -' a $end
$var wire 1 .' b $end
$var wire 1 /' cin $end
$var wire 1 0' cout $end
$var wire 1 1' sum $end
$upscope $end
$scope module fa10 $end
$var wire 1 2' a $end
$var wire 1 3' b $end
$var wire 1 4' cin $end
$var wire 1 5' cout $end
$var wire 1 6' sum $end
$upscope $end
$scope module fa11 $end
$var wire 1 7' a $end
$var wire 1 8' b $end
$var wire 1 9' cin $end
$var wire 1 :' cout $end
$var wire 1 ;' sum $end
$upscope $end
$scope module fa12 $end
$var wire 1 <' a $end
$var wire 1 =' b $end
$var wire 1 >' cin $end
$var wire 1 ?' cout $end
$var wire 1 @' sum $end
$upscope $end
$scope module fa13 $end
$var wire 1 A' a $end
$var wire 1 B' b $end
$var wire 1 C' cin $end
$var wire 1 D' cout $end
$var wire 1 E' sum $end
$upscope $end
$scope module fa14 $end
$var wire 1 F' a $end
$var wire 1 G' b $end
$var wire 1 H' cin $end
$var wire 1 I' cout $end
$var wire 1 J' sum $end
$upscope $end
$scope module fa15 $end
$var wire 1 K' a $end
$var wire 1 L' b $end
$var wire 1 M' cin $end
$var wire 1 Z" cout $end
$var wire 1 N' sum $end
$upscope $end
$scope module fa2 $end
$var wire 1 O' a $end
$var wire 1 P' b $end
$var wire 1 Q' cin $end
$var wire 1 R' cout $end
$var wire 1 S' sum $end
$upscope $end
$scope module fa3 $end
$var wire 1 T' a $end
$var wire 1 U' b $end
$var wire 1 V' cin $end
$var wire 1 W' cout $end
$var wire 1 X' sum $end
$upscope $end
$scope module fa4 $end
$var wire 1 Y' a $end
$var wire 1 Z' b $end
$var wire 1 [' cin $end
$var wire 1 \' cout $end
$var wire 1 ]' sum $end
$upscope $end
$scope module fa5 $end
$var wire 1 ^' a $end
$var wire 1 _' b $end
$var wire 1 `' cin $end
$var wire 1 a' cout $end
$var wire 1 b' sum $end
$upscope $end
$scope module fa6 $end
$var wire 1 c' a $end
$var wire 1 d' b $end
$var wire 1 e' cin $end
$var wire 1 f' cout $end
$var wire 1 g' sum $end
$upscope $end
$scope module fa7 $end
$var wire 1 h' a $end
$var wire 1 i' b $end
$var wire 1 j' cin $end
$var wire 1 k' cout $end
$var wire 1 l' sum $end
$upscope $end
$scope module fa8 $end
$var wire 1 m' a $end
$var wire 1 n' b $end
$var wire 1 o' cin $end
$var wire 1 p' cout $end
$var wire 1 q' sum $end
$upscope $end
$scope module fa9 $end
$var wire 1 r' a $end
$var wire 1 s' b $end
$var wire 1 t' cin $end
$var wire 1 u' cout $end
$var wire 1 v' sum $end
$upscope $end
$upscope $end
$scope module adder6 $end
$var wire 16 w' a [15:0] $end
$var wire 16 x' b [15:0] $end
$var wire 1 Z" cin $end
$var wire 16 y' sum [15:0] $end
$var wire 1 Y" cout $end
$var wire 16 z' carry [15:0] $end
$scope module fa0 $end
$var wire 1 {' a $end
$var wire 1 |' b $end
$var wire 1 Z" cin $end
$var wire 1 }' cout $end
$var wire 1 ~' sum $end
$upscope $end
$scope module fa1 $end
$var wire 1 !( a $end
$var wire 1 "( b $end
$var wire 1 #( cin $end
$var wire 1 $( cout $end
$var wire 1 %( sum $end
$upscope $end
$scope module fa10 $end
$var wire 1 &( a $end
$var wire 1 '( b $end
$var wire 1 (( cin $end
$var wire 1 )( cout $end
$var wire 1 *( sum $end
$upscope $end
$scope module fa11 $end
$var wire 1 +( a $end
$var wire 1 ,( b $end
$var wire 1 -( cin $end
$var wire 1 .( cout $end
$var wire 1 /( sum $end
$upscope $end
$scope module fa12 $end
$var wire 1 0( a $end
$var wire 1 1( b $end
$var wire 1 2( cin $end
$var wire 1 3( cout $end
$var wire 1 4( sum $end
$upscope $end
$scope module fa13 $end
$var wire 1 5( a $end
$var wire 1 6( b $end
$var wire 1 7( cin $end
$var wire 1 8( cout $end
$var wire 1 9( sum $end
$upscope $end
$scope module fa14 $end
$var wire 1 :( a $end
$var wire 1 ;( b $end
$var wire 1 <( cin $end
$var wire 1 =( cout $end
$var wire 1 >( sum $end
$upscope $end
$scope module fa15 $end
$var wire 1 ?( a $end
$var wire 1 @( b $end
$var wire 1 A( cin $end
$var wire 1 Y" cout $end
$var wire 1 B( sum $end
$upscope $end
$scope module fa2 $end
$var wire 1 C( a $end
$var wire 1 D( b $end
$var wire 1 E( cin $end
$var wire 1 F( cout $end
$var wire 1 G( sum $end
$upscope $end
$scope module fa3 $end
$var wire 1 H( a $end
$var wire 1 I( b $end
$var wire 1 J( cin $end
$var wire 1 K( cout $end
$var wire 1 L( sum $end
$upscope $end
$scope module fa4 $end
$var wire 1 M( a $end
$var wire 1 N( b $end
$var wire 1 O( cin $end
$var wire 1 P( cout $end
$var wire 1 Q( sum $end
$upscope $end
$scope module fa5 $end
$var wire 1 R( a $end
$var wire 1 S( b $end
$var wire 1 T( cin $end
$var wire 1 U( cout $end
$var wire 1 V( sum $end
$upscope $end
$scope module fa6 $end
$var wire 1 W( a $end
$var wire 1 X( b $end
$var wire 1 Y( cin $end
$var wire 1 Z( cout $end
$var wire 1 [( sum $end
$upscope $end
$scope module fa7 $end
$var wire 1 \( a $end
$var wire 1 ]( b $end
$var wire 1 ^( cin $end
$var wire 1 _( cout $end
$var wire 1 `( sum $end
$upscope $end
$scope module fa8 $end
$var wire 1 a( a $end
$var wire 1 b( b $end
$var wire 1 c( cin $end
$var wire 1 d( cout $end
$var wire 1 e( sum $end
$upscope $end
$scope module fa9 $end
$var wire 1 f( a $end
$var wire 1 g( b $end
$var wire 1 h( cin $end
$var wire 1 i( cout $end
$var wire 1 j( sum $end
$upscope $end
$upscope $end
$scope module adder7 $end
$var wire 16 k( a [15:0] $end
$var wire 16 l( b [15:0] $end
$var wire 1 Y" cin $end
$var wire 16 m( sum [15:0] $end
$var wire 1 n( cout $end
$var wire 16 o( carry [15:0] $end
$scope module fa0 $end
$var wire 1 p( a $end
$var wire 1 q( b $end
$var wire 1 Y" cin $end
$var wire 1 r( cout $end
$var wire 1 s( sum $end
$upscope $end
$scope module fa1 $end
$var wire 1 t( a $end
$var wire 1 u( b $end
$var wire 1 v( cin $end
$var wire 1 w( cout $end
$var wire 1 x( sum $end
$upscope $end
$scope module fa10 $end
$var wire 1 y( a $end
$var wire 1 z( b $end
$var wire 1 {( cin $end
$var wire 1 |( cout $end
$var wire 1 }( sum $end
$upscope $end
$scope module fa11 $end
$var wire 1 ~( a $end
$var wire 1 !) b $end
$var wire 1 ") cin $end
$var wire 1 #) cout $end
$var wire 1 $) sum $end
$upscope $end
$scope module fa12 $end
$var wire 1 %) a $end
$var wire 1 &) b $end
$var wire 1 ') cin $end
$var wire 1 () cout $end
$var wire 1 )) sum $end
$upscope $end
$scope module fa13 $end
$var wire 1 *) a $end
$var wire 1 +) b $end
$var wire 1 ,) cin $end
$var wire 1 -) cout $end
$var wire 1 .) sum $end
$upscope $end
$scope module fa14 $end
$var wire 1 /) a $end
$var wire 1 0) b $end
$var wire 1 1) cin $end
$var wire 1 2) cout $end
$var wire 1 3) sum $end
$upscope $end
$scope module fa15 $end
$var wire 1 4) a $end
$var wire 1 5) b $end
$var wire 1 6) cin $end
$var wire 1 n( cout $end
$var wire 1 7) sum $end
$upscope $end
$scope module fa2 $end
$var wire 1 8) a $end
$var wire 1 9) b $end
$var wire 1 :) cin $end
$var wire 1 ;) cout $end
$var wire 1 <) sum $end
$upscope $end
$scope module fa3 $end
$var wire 1 =) a $end
$var wire 1 >) b $end
$var wire 1 ?) cin $end
$var wire 1 @) cout $end
$var wire 1 A) sum $end
$upscope $end
$scope module fa4 $end
$var wire 1 B) a $end
$var wire 1 C) b $end
$var wire 1 D) cin $end
$var wire 1 E) cout $end
$var wire 1 F) sum $end
$upscope $end
$scope module fa5 $end
$var wire 1 G) a $end
$var wire 1 H) b $end
$var wire 1 I) cin $end
$var wire 1 J) cout $end
$var wire 1 K) sum $end
$upscope $end
$scope module fa6 $end
$var wire 1 L) a $end
$var wire 1 M) b $end
$var wire 1 N) cin $end
$var wire 1 O) cout $end
$var wire 1 P) sum $end
$upscope $end
$scope module fa7 $end
$var wire 1 Q) a $end
$var wire 1 R) b $end
$var wire 1 S) cin $end
$var wire 1 T) cout $end
$var wire 1 U) sum $end
$upscope $end
$scope module fa8 $end
$var wire 1 V) a $end
$var wire 1 W) b $end
$var wire 1 X) cin $end
$var wire 1 Y) cout $end
$var wire 1 Z) sum $end
$upscope $end
$scope module fa9 $end
$var wire 1 [) a $end
$var wire 1 \) b $end
$var wire 1 ]) cin $end
$var wire 1 ^) cout $end
$var wire 1 _) sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module mux $end
$var wire 16 `) in0 [15:0] $end
$var wire 16 a) in1 [15:0] $end
$var wire 16 b) in2 [15:0] $end
$var wire 16 c) in4 [15:0] $end
$var wire 16 d) in5 [15:0] $end
$var wire 3 e) sel [2:0] $end
$var wire 16 f) out [15:0] $end
$var wire 16 g) in3 [15:0] $end
$upscope $end
$scope module orGate $end
$var wire 16 h) a [15:0] $end
$var wire 16 i) b [15:0] $end
$var wire 16 j) y [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b0 j)
b0 i)
b0 h)
b0 g)
b0 f)
b0 e)
b1111111111111111 d)
b0 c)
b0 b)
b0 a)
b0 `)
0_)
0^)
0])
0\)
0[)
0Z)
0Y)
0X)
0W)
0V)
0U)
0T)
0S)
0R)
0Q)
0P)
0O)
0N)
0M)
0L)
0K)
0J)
0I)
0H)
0G)
0F)
0E)
0D)
0C)
0B)
0A)
0@)
0?)
0>)
0=)
0<)
0;)
0:)
09)
08)
07)
06)
05)
04)
03)
02)
01)
00)
0/)
0.)
0-)
0,)
0+)
0*)
0))
0()
0')
0&)
0%)
0$)
0#)
0")
0!)
0~(
0}(
0|(
0{(
0z(
0y(
0x(
0w(
0v(
0u(
0t(
0s(
0r(
0q(
0p(
bz000000000000000 o(
0n(
b0 m(
b0 l(
b0 k(
0j(
0i(
0h(
0g(
0f(
0e(
0d(
0c(
0b(
0a(
0`(
0_(
0^(
0](
0\(
0[(
0Z(
0Y(
0X(
0W(
0V(
0U(
0T(
0S(
0R(
0Q(
0P(
0O(
0N(
0M(
0L(
0K(
0J(
0I(
0H(
0G(
0F(
0E(
0D(
0C(
0B(
0A(
0@(
0?(
0>(
0=(
0<(
0;(
0:(
09(
08(
07(
06(
05(
04(
03(
02(
01(
00(
0/(
0.(
0-(
0,(
0+(
0*(
0)(
0((
0'(
0&(
0%(
0$(
0#(
0"(
0!(
0~'
0}'
0|'
0{'
bz000000000000000 z'
b0 y'
b0 x'
b0 w'
0v'
0u'
0t'
0s'
0r'
0q'
0p'
0o'
0n'
0m'
0l'
0k'
0j'
0i'
0h'
0g'
0f'
0e'
0d'
0c'
0b'
0a'
0`'
0_'
0^'
0]'
0\'
0['
0Z'
0Y'
0X'
0W'
0V'
0U'
0T'
0S'
0R'
0Q'
0P'
0O'
0N'
0M'
0L'
0K'
0J'
0I'
0H'
0G'
0F'
0E'
0D'
0C'
0B'
0A'
0@'
0?'
0>'
0='
0<'
0;'
0:'
09'
08'
07'
06'
05'
04'
03'
02'
01'
00'
0/'
0.'
0-'
0,'
0+'
0*'
0)'
bz000000000000000 ('
b0 ''
b0 &'
b0 %'
0$'
0#'
0"'
0!'
0~&
0}&
0|&
0{&
0z&
0y&
0x&
0w&
0v&
0u&
0t&
0s&
0r&
0q&
0p&
0o&
0n&
0m&
0l&
0k&
0j&
0i&
0h&
0g&
0f&
0e&
0d&
0c&
0b&
0a&
0`&
0_&
0^&
0]&
0\&
0[&
0Z&
0Y&
0X&
0W&
0V&
0U&
0T&
0S&
0R&
0Q&
0P&
0O&
0N&
0M&
0L&
0K&
0J&
0I&
0H&
0G&
0F&
0E&
0D&
0C&
0B&
0A&
0@&
0?&
0>&
0=&
0<&
0;&
0:&
09&
08&
07&
06&
05&
bz000000000000000 4&
b0 3&
b0 2&
b0 1&
00&
0/&
0.&
0-&
0,&
0+&
0*&
0)&
0(&
0'&
0&&
0%&
0$&
0#&
0"&
0!&
0~%
0}%
0|%
0{%
0z%
0y%
0x%
0w%
0v%
0u%
0t%
0s%
0r%
0q%
0p%
0o%
0n%
0m%
0l%
0k%
0j%
0i%
0h%
0g%
0f%
0e%
0d%
0c%
0b%
0a%
0`%
0_%
0^%
0]%
0\%
0[%
0Z%
0Y%
0X%
0W%
0V%
0U%
0T%
0S%
0R%
0Q%
0P%
0O%
0N%
0M%
0L%
0K%
0J%
0I%
0H%
0G%
0F%
0E%
0D%
0C%
0B%
0A%
bz000000000000000 @%
b0 ?%
b0 >%
b0 =%
0<%
0;%
0:%
09%
08%
07%
06%
05%
04%
03%
02%
01%
00%
0/%
0.%
0-%
0,%
0+%
0*%
0)%
0(%
0'%
0&%
0%%
0$%
0#%
0"%
0!%
0~$
0}$
0|$
0{$
0z$
0y$
0x$
0w$
0v$
0u$
0t$
0s$
0r$
0q$
0p$
0o$
0n$
0m$
0l$
0k$
0j$
0i$
0h$
0g$
0f$
0e$
0d$
0c$
0b$
0a$
0`$
0_$
0^$
0]$
0\$
0[$
0Z$
0Y$
0X$
0W$
0V$
0U$
0T$
0S$
0R$
0Q$
0P$
0O$
0N$
0M$
bz000000000000000 L$
b0 K$
b0 J$
b0 I$
0H$
0G$
0F$
0E$
0D$
0C$
0B$
0A$
0@$
0?$
0>$
0=$
0<$
0;$
0:$
09$
08$
07$
06$
05$
04$
03$
02$
01$
00$
0/$
0.$
0-$
0,$
0+$
0*$
0)$
0($
0'$
0&$
0%$
0$$
0#$
0"$
0!$
0~#
0}#
0|#
0{#
0z#
0y#
0x#
0w#
0v#
0u#
0t#
0s#
0r#
0q#
0p#
0o#
0n#
0m#
0l#
0k#
0j#
0i#
0h#
0g#
0f#
0e#
0d#
0c#
0b#
0a#
0`#
0_#
0^#
0]#
0\#
0[#
0Z#
0Y#
bz000000000000000 X#
b0 W#
b0 V#
b0 U#
0T#
0S#
0R#
0Q#
0P#
0O#
0N#
0M#
0L#
0K#
0J#
0I#
0H#
0G#
0F#
0E#
0D#
0C#
0B#
0A#
0@#
0?#
0>#
0=#
0<#
0;#
0:#
09#
08#
07#
06#
05#
04#
03#
02#
01#
00#
0/#
0.#
0-#
0,#
0+#
0*#
0)#
0(#
0'#
0&#
0%#
0$#
0##
0"#
0!#
0~"
0}"
0|"
0{"
0z"
0y"
0x"
0w"
0v"
0u"
0t"
0s"
0r"
0q"
0p"
0o"
0n"
0m"
0l"
0k"
0j"
0i"
0h"
0g"
0f"
0e"
bz000000000000000 d"
b0 c"
0b"
b0 a"
b0 `"
0_"
0^"
0]"
0\"
0["
0Z"
0Y"
b0 X"
b0 W"
b0 V"
b0 U"
b0 T"
b0 S"
b0 R"
b0 Q"
b0 P"
b0 O"
b0 N"
b0 M"
b0 L"
b0 K"
b0 J"
b0 I"
b0 H"
b0 G"
b0 F"
b0 E"
b0 D"
b0 C"
b0 B"
b0 A"
b0 @"
b0 ?"
b0 >"
b0 ="
b0 <"
0;"
0:"
09"
08"
07"
06"
05"
04"
03"
02"
01"
00"
0/"
0."
0-"
0,"
0+"
0*"
0)"
0("
0'"
0&"
0%"
0$"
0#"
0""
0!"
0~
0}
0|
0{
0z
0y
0x
0w
0v
0u
0t
0s
0r
0q
0p
0o
0n
0m
0l
0k
0j
0i
0h
0g
0f
0e
0d
0c
0b
0a
0`
0_
0^
0]
0\
0[
0Z
0Y
0X
0W
0V
0U
0T
0S
0R
0Q
0P
0O
0N
0M
0L
bz000000000000000 K
b0 J
b0 I
b0 H
0G
b0 F
0E
b0 D
b0 C
b0 B
b1111111111111111 A
b1111111111111111 @
b0 ?
b0 >
b0 =
b0 <
b0 ;
bx :
bx 9
b0 8
b1111111111111111 7
b0 6
b0 5
b0 4
03
b0 2
b0 1
b0 0
b0 /
bx .
b0 -
0,
b0 +
b0 *
0)
b0 (
b0 '
0&
1%
bx $
0#
0"
bx !
$end
#10
0%
b10000 5
b10000 f)
1G
b10000 2
b10000 F
b10000 J
b10000 <"
b10000 `)
b10000 a)
1""
1|
b10000 4
b10000 g)
b10000 j)
1)
b10000 '
b10000 -
b10000 ;
b10000 >
b10000 B
b10000 H
b10000 ="
b10000 h)
#20
0)
#30
b110000 !
b110000 :
b110000 $
b110000 .
b110000 9
b100000 5
b100000 f)
0""
b100000 2
b100000 F
b100000 J
b100000 <"
b100000 `)
b100000 a)
1'"
0|
1#"
b100000 4
b100000 g)
b100000 j)
b1 +
b1 1
1)
b100000 '
b100000 -
b100000 ;
b100000 >
b100000 B
b100000 H
b100000 ="
b100000 h)
#40
0)
#80
b1111111111110000 !
b1111111111110000 :
b1111111111110000 $
b1111111111110000 .
b1111111111110000 9
b1 *
b1 0
b1 e)
#100
b0 5
b0 f)
b0 $
b0 .
b0 9
b0 !
b0 :
b10 *
b10 0
b10 e)
#120
b100000 !
b100000 :
b100000 5
b100000 f)
b11 *
b11 0
b11 e)
#140
b0 !
b0 :
b0 5
b0 f)
b100 *
b100 0
b100 e)
#160
b1111111111111111 !
b1111111111111111 :
b1111111111111111 5
b1111111111111111 f)
b101 *
b101 0
b101 e)
#190
